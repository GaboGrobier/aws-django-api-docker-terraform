name: publish ec2 with api

on:
  workflow_run:
    workflows: ["build and publis registry and image"]
    types:
      - completed

jobs:
  building_and_config_ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.3

      - name: Building ecr repository
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd terraform/build_ec2
          terraform init
          terraform refresh
          terraform apply -auto-approve


  deploy_api_to_ec2:
    runs-on: ubuntu-latest
    needs: building_and_config_ec2
    steps:

      - name: Checkout code
        uses: actions/checkout@v2



      - name: Obtener dirección IP pública
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          export PUBLIC_IP=$(aws ec2 describe-instances --region $AWS_REGION --filters "Name=tag:Name,Values=server_prueba_dflatam" \
          --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        

      - name: Add llave SSH 
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa        

      - name: Copiando archivos al servidor
        run: |
          rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" ./repositorios/api ${{ secrets.USER_SERVER }}@${{ env.PUBLIC_IP }}:/home/ubuntu/web/

      - name: Esperar a que Docker esté listo
        run: |
            echo "Esperando a que Docker esté listo..."
            until ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{secrets.USER_SERVER}}@${{ env.PUBLIC_IP }} "sudo docker info" > /dev/null 2>&1; do
              echo "Esperando a que Docker esté en funcionamiento..."
              sleep 5
            done
            echo "Docker está listo."


      - name: Verificar que Docker Compose esté funcional
        run: |
              echo "Comprobando que Docker Compose esté funcional..."
              ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.USER_SERVER }}@${{ env.PUBLIC_IP }} "
                until sudo docker-compose version &> /dev/null; do
                  echo 'Docker Compose no está listo. Intentando nuevamente en 5 segundos...'
                  sleep 5
                done
                echo 'Docker Compose está listo para ejecutar.'
              "
          

      - name: Construir Docker en el servidor
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{secrets.USER_SERVER}}@${{ env.PUBLIC_IP }} << 'EOF'
          cd /home/ubuntu/web/api
          sudo docker-compose down
          sudo docker-compose up -d --build
          EOF

      - name: mostrar url pagina
        run: |
          echo "ingresa a  http://${{ env.PUBLIC_IP }}"
