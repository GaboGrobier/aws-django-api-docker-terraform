name: publish ec2 with api

on:
  workflow_run:
    workflows: ["repository_scan"]
    types:
      - completed

jobs:
  building_ec2_and_publish_api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.10.3

      - name: Building ecr repository
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd terraform/build_ec2
          terraform init
          terraform apply -auto-approve
        
          - name: Get EC2 instance ID
          id: ec2_instance_id
          run: |
            INSTANCE_ID=$(terraform output -raw ec2_instance_id)
            echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
            echo "Instance ID: $INSTANCE_ID"
  
      - name: Get EC2 public IP using AWS CLI
        id: get_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "PUBLIC_IP=${PUBLIC_IP}" >> $GITHUB_ENV
          echo "Public IP: $PUBLIC_IP"
  
      - name: Show public IP
        run: |
          echo "The public IP of the instance is: ${{ env.PUBLIC_IP }}"



  deploy_api_to_ec2:
    runs-on: ubuntu-latest
    needs: building_ec2_and_publish_api
    steps:

        - name: Checkout code
          uses: actions/checkout@v2
  
        - name: mirar ip publica
          run: | 
             echo "Using IP_PUBLICA: ${{ env.IP_PUBLICA }}"

        - name: Add SSH Key
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.PASSWORD_SERVER }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa        

        - name: Copy files to server
          run: |
            rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" ./repositorios/api ${{ secrets.USER_SERVER }}@${{ env.IP_PUBLICA }}:/home/ubuntu/web/



        - name: pausa para esperar termino de instalacion Docker y docker-compose
          run: sleep 35

        - name: SSH commands to deploy
          run: |
              ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{secrets.USER_SERVER}}@${{ env.IP_PUBLICA }} << 'EOF'
              cd /home/ubuntu/web/
              docker-compose down
              docker-compose up -d --build
              EOF